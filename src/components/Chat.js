import React, { useState, useEffect } from 'react';
import toast, { Toaster } from 'react-hot-toast';
import { useParams, useHistory } from 'react-router-dom';
import { default as socket } from './ws';
import UserOnline from './UserOnline';

function Chat() {
  // –ø–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Ä—à—Ä—É—Ç–∞ —Å —é—Ä–ª
  let { user_nickName } = useParams();
  const [nickname, setNickname] = useState('');
  const [msg, setMsg] = useState('');
  const [chat, setChat] = useState([]);
  const [usersOnline, setUsersOnline] = useState([]);
  const [toUser, setToUser] = useState('');
  const history = useHistory();

  useEffect(() => {
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —é–∑–µ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è, –º–µ–Ω—è–µ–º —é—Ä–ª
    if (!localStorage.getItem('chatConnected')) {
      history.push(`/`);
    }

    // –µ—Å–ª–∏ —é–∑–µ—Ä –ø–æ–∫–∏–Ω—É–ª —Å—Ç—Ä —Ç–æ –æ—Ç–∫–ª—á–∞–µ–º –µ–≥–æ (–≤ –ª–æ–∫–∞–ª–°—Ç–æ—Ä–µ–¥–∂)
    window.addEventListener('beforeunload', () =>
      localStorage.removeItem('chatConnected')
    );

    // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–º—è –≤ —Å—Ç–µ–π—Ç
    setNickname(user_nickName);

    // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–∞–Ω–Ω—ã–µ
    socket.on('CHAT:MESSAGE', ({ nickname, msg }) => {
      setChat([...chat, { nickname, msg }]);
    });

    socket.on('private msg', ({ id, nickname, msg }) => {
      setChat([...chat, `üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${nickname}: ${msg}`]);
    });

    //  —Å–∫—Ä–æ–ª–ª–∏–º –≤–Ω–∏–∑ –ø—Ä–∏ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    let objDiv = document.getElementById('msg');
    objDiv.scrollTop = objDiv.scrollHeight;

    return () => {
      // –æ—Ç–∫–ª—é—á–∞–µ–º —Å–æ–∫–µ—Ç
      socket.off();
    };
  }, [chat, toUser, user_nickName, history]);

  useEffect(() => {
    // –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å—Ç–µ–π—Ç –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    socket.on('USER:ON', (list) => {
      setUsersOnline(list);
    });
    //  –ø–æ–ª—É—á–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∏–∫–Ω–µ–π–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ
    socket.on('USER:CONNECT', (user) => {
      setChat([...chat, `üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è`]);
    });

    socket.on('USER:DISCONNECTED', (user) => {
      // –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ —é–∑–µ—Ä–∞ –Ω–µ—Ç —Ç–æ –æ—Ç–∫–ª—é—á–∞–µ–º –µ–≥–æ
      if (user !== null) {
        setChat([...chat, `${user} üëãüèª –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç`]);
      }
    });

    return () => {
      socket.off();
    };
  }, [chat]);

  // –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const submitMsg = (e) => {
    e.preventDefault();

    // –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (msg === '') {
      toast('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', {
        duration: 4000,
        style: {},
        className: '',
        icon: '‚ö†Ô∏è',
        role: 'status',
        ariaLive: 'polite',
      });
    } else if (toUser === nickname) {
      toast('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ.', {
        duration: 2000,
        style: {},
        className: '',
        icon: '‚ö†Ô∏è',
        role: 'status',
        ariaLive: 'polite',
      });
    } else if (toUser !== '') {
      socket.emit('CHAT:MESSAGE private', { toUser, nickname, msg });
      setChat([...chat, { nickname, msg }]);
      setChat([...chat, `üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è ${toUser}: ${msg}`]);
      setMsg('');
      // setToUser('');
    } else {
      socket.emit('CHAT:MESSAGE', { nickname, msg });
      setChat([...chat, { nickname, msg }]);
      setMsg('');
    }
  };
  // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω–ª–∞–π–Ω –≤ —Å—Ç–µ–π—Ç
  const saveUserToPrivateMsg = (userID) => {
    setToUser(userID);
  };

  return (
    <div className="flex w-screen main-chat lg:h-screen bg-gray-150 ">
      {/*  –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      <Toaster />
      <div className="flex w-full lg:w-5/6 lg:h-5/6 lg:mx-auto lg:my-auto shadow-md">
        {/* –û–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ */}
        <div className="hidden lg:block pl-4 pr-4 w-64 bg-gray-200">
          <p className="font-black my-4 text-xl divide-y divide-gray-900">
            üåê –û–Ω–ª–∞–π–Ω: ({usersOnline !== null ? usersOnline.length : '0'}):
          </p>
          <ul className="truncate">
            <button
              className="py-2 bg-gray-50 mt-3 mb-3 w-full rounded-md focus:outline-none"
              onClick={(e) => setToUser('')}
            >
              –ù–∞–ø–∏—Å–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ
            </button>
            {usersOnline !== null
              ? usersOnline.map((el, index) => (
                  <button
                    key={index}
                    onClick={() => saveUserToPrivateMsg(el)}
                    className="test-test-html-class block focus:outline-none w-full mb-3 truncate"
                  >
                    <UserOnline nickname={el} />
                  </button>
                ))
              : ''}
          </ul>
        </div>
        <div className="flex flex-col flex-grow lg:max-w-full bg-gray-100">
          {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
          <p className="font-black mt-4 mb-2 pb-4 pl-4 lg:pl-8 text-2xl border-b-2">
            {toUser === '' ? `üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π —á–∞—Ç` : `üë®‚Äçüíº –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${toUser}`}
          </p>
          <div
            id="msg"
            className="messages h-5/6 overflow-y-auto pl-4 lg:pl-8 pt-4 mb-2 lg:mb-0"
          >
            <ul className="w-96">
              {/* –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ */}
              {chat.map((el, index) => (
                <li key={index} className="text-white break-words pr-6">
                  {el.nickname != null ? (
                    <p className="pl-2 text-white font-semibold bg-blue-400 mb-3 rounded py-3">
                      {el.nickname}: {el.msg}
                    </p>
                  ) : (
                    <p className="pl-2 text-white font-semibold bg-indigo-400  mb-3 rounded py-3">
                      {el}
                    </p>
                  )}
                </li>
              ))}
            </ul>
          </div>
          <form>
            <div className="px-4">
              {/* –≤—ã–±–∏—Ä–∞–µ–º –∏–∑ —Å–µ–ª–µ–∫—Ç–∞ —é–∑–µ—Ä–æ–≤ */}
              <select
                className="hidden text-xs appearance-none flex-1 w-full py-2 px-1 lg:px-4 placeholder-gray-400 shadow-sm focus:outline-none"
                id="usersOn"
                onChange={(e) => saveUserToPrivateMsg(e.target.value)}
              >
                <option value="">–í—Å–µ–º</option>
                {usersOnline !== null
                  ? usersOnline.map((el, index) => (
                      <option value={el} className="" key={index}>
                        {el}
                      </option>
                    ))
                  : ''}
              </select>
            </div>
            <div className="w-full flex pb-4 lg:p-4 bg-purple-50">
              <div className="flex relative w-full lg:w-5/6">
                <span className="rounded-l-md inline-flex items-center border-t bg-white border-l border-b  border-gray-300 text-gray-500 shadow-sm text-sm">
                  {toUser === '' ? (
                    <p className="bg-blue-400 text-white text-xs lg:text-base font-normal w-20 p-2 rounded-l-md">
                      –í—Å–µ–º
                    </p>
                  ) : (
                    <p className="bg-blue-500 text-white text-xs lg:text-base p-2 w-20 rounded-l-md">
                      {toUser}
                    </p>
                  )}
                </span>
                <input
                  type="text"
                  className="rounded-r-lg flex-1 appearance-none border border-gray-300 w-full py-2 px-1 lg:px-4 bg-white text-gray-700 placeholder-gray-400 shadow-sm text-base focus:outline-none"
                  name="message"
                  onChange={(e) => setMsg(e.target.value)}
                  value={msg}
                />
              </div>
              <div className="hidden lg:block w-1/6">
                <button
                  className="ml-8 flex-shrink-0 bg-blue-500 text-white text-base font-semibold py-2 px-4 rounded-lg shadow-md hover:bg-green-700 focus:outline-none focus:ring-2"
                  onClick={(e) => submitMsg(e)}
                >
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}

export default Chat;
